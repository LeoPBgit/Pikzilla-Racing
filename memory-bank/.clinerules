# Pikzilla Racing Project Rules

## Project Conventions

### File Naming
- React components: PascalCase (e.g., `HomePage.tsx`)
- CSS files: Match component name (e.g., `HomePage.css`)
- Utility files: camelCase (e.g., `imageUtils.ts`)
- Test files: ComponentName.test.tsx (e.g., `HomePage.test.tsx`)

### Code Style
- Use TypeScript for all code files
- Use functional components with hooks
- Prefer const over let when variables won't be reassigned
- Use explicit return types for functions
- Use interface over type for object definitions
- Use CSS variables for theming and consistent styling

### Component Structure
- Each component should have its own directory if it has multiple files
- Keep components focused on a single responsibility
- Extract reusable logic into custom hooks
- Use composition over inheritance
- Limit component nesting to avoid prop drilling

### CSS Conventions
- Use BEM naming convention for CSS classes
- Component-specific styles in component CSS files
- Global styles in global.css
- Use CSS variables for theming
- Mobile-first approach with media queries for larger screens

### Asset Management
- Store assets in the public directory
- Organize assets by type (Icons, Images, Logo, Vectors)
- Use relative paths for asset loading
- Optimize images before adding to the project

## Workflow Patterns

### Development Process
1. Review requirements and visual references
2. Create component structure
3. Implement basic functionality
4. Style components according to design
5. Add responsive behavior
6. Test and refine

### Documentation
- Update memory bank files when making significant changes
- Document key decisions and their rationale
- Keep progress.md updated with completed work
- Document known issues and their status

### Testing Strategy
- Manual testing on different devices and browsers
- Check responsive behavior at all breakpoints
- Verify asset loading and display
- Test navigation and interactive elements

## Critical Implementation Paths

### Page Structure
1. Create page component file (e.g., `TeamPage.tsx`)
2. Create corresponding CSS file (e.g., `TeamPage.css`)
3. Import and use Layout component
4. Implement page-specific sections
5. Add responsive styling
6. Add to router configuration

### Asset Loading
1. Ensure assets are in the correct public directory
2. Use relative paths from the public directory
3. Implement fallback for missing assets
4. Optimize images for performance

### Styling Implementation
1. Define component-specific classes
2. Use CSS variables for theming
3. Implement responsive behavior
4. Test on different screen sizes

## User Preferences

### Visual Design
- Dark theme with orange accents
- Clean, modern typography
- Dynamic, racing-inspired elements
- High-quality images of cars and racing events

### Content Presentation
- Clear hierarchy of information
- Engaging headlines and copy
- Strategic use of call-to-action buttons
- Balance of text and visual elements

### Navigation
- Intuitive, easy-to-use navigation
- Clear indication of current page
- Accessible on all device sizes
- Smooth transitions between pages

## Project-Specific Patterns

### Page Components
- Each page follows a similar structure:
  1. Hero section with background image
  2. Introduction or overview section
  3. Main content sections
  4. Call-to-action or related content

### Responsive Patterns
- Mobile: Single column layout
- Tablet: Two column layout for some sections
- Desktop: Multi-column layout with larger images
- Large Desktop: Same as desktop with increased spacing

### Interactive Elements
- Buttons: Orange background with white text
- Links: White text with orange hover state
- Cards: Subtle hover effect with elevation
- Forms: Clear labels and validation feedback

## Known Challenges

### Development Environment
- Issues with Vite development server
- Workaround: Using static file server

### Asset Path Management
- Ensuring assets load correctly in all environments
- Solution: Use public directory and relative paths

### Responsive Design Edge Cases
- Some layouts break at specific screen sizes
- Solution: Add additional media queries for these cases

### Browser Compatibility
- Some CSS features not supported in older browsers
- Solution: Add fallbacks for critical features

## Evolution of Project Decisions

### Initial Approach
- Started with basic page structure
- Focused on implementing visual design
- Used simple component structure

### Current Approach
- More modular component structure
- Better separation of concerns
- More consistent styling with CSS variables
- Improved asset management

### Future Direction
- Enhanced interactivity
- Better performance optimization
- Improved accessibility
- Integration with backend services

## Tool Usage Patterns

### Visual Studio Code
- Use ESLint for code quality
- Use Prettier for code formatting
- Use React and TypeScript extensions for better development experience

### Browser Developer Tools
- Use for debugging layout issues
- Check network requests for asset loading
- Test responsive design with device emulation
- Monitor performance with Lighthouse

### Terminal Commands
- `npm run dev`: Start development server
- `npm run build`: Build for production
- `npm run lint`: Run ESLint
- `serve -s pikzilla-racing`: Serve static files
